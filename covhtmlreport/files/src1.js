var g_data = {"name":"./Verilog_Code/atm.v","src":"`include \"definitions.v\"\n`include \"authenticator.v\"\n\n\nmodule ATM (clk,rst,operation,acc_num,pin,newPin,amount,language,balance,success,state);\ninput clk;\ninput rst;\ninput [2:0] operation;\ninput [3:0] acc_num;\ninput [13:0] pin;\ninput [13:0] newPin;\ninput [13:0] amount;\ninput language;\noutput reg [13:0] balance;\noutput reg success;\noutput reg [2:0] state;\n\nreg [2:0] next_state = `WAITING;\nreg [2:0] current_state = `IDLE;\nwire [3:0] acc_index;\nwire acc_found_stat;\nwire acc_auth_stat;\nreg authenticatedFlag = 1;\nreg[31:0] fd;\nreg[3:0] i;\nreg[3:0] counter;\n\nreg [31:0] balance_database [9:0];\n\n  initial begin\n    fd = $fopen(\"./Database/balance_DB.txt\", \"r\");\n    for (i = 0; i < 10 ; i = i +1 ) begin\n        $fscanf(fd, \"%d\\n\", balance_database[i]);\n    end\n    $fclose(fd);  \n  end\n\n\n\nAuthenticator authenticator (acc_num, pin, acc_index, acc_found_stat, acc_auth_stat, newPin);\nATM_Functions functions ();\nalways @(negedge clk) begin\n    $display(\"counter = %d\",counter );\n    counter = counter + 1;\n    if (counter >= 4) begin\n        next_state =  `WAITING;\n        counter = 0;\n    end\nend\n\nalways @(posedge clk or negedge rst) begin\n  if (!rst) begin\n    current_state <= `IDLE;\n  end\n  else begin\n    current_state <= next_state;\n  end\nend\n\nalways @(current_state or operation or acc_num or language or amount or newPin or pin ) begin\n    \n    counter = 0;    \n    case (current_state)\n        `WAITING: begin\n        if (acc_found_stat == `TRUE) begin\n            next_state = `AUTHENTICATION;\n        end\n        else begin\n            next_state = `WAITING;\n            success = 0;\n        end\n        end\n        `AUTHENTICATION: begin\n            if (acc_auth_stat == `ACCOUNT_NOT_AUTHENTICATED) begin\n                next_state = `WAITING;\n                success = 0;\n            end\n            else begin\n                next_state = `MENU;\n                authenticatedFlag = 0;\n                success = 0;\n            end\n        end\n        `MENU: begin\n          \n        case (operation)\n            `BALANCE: begin\n            next_state = `BALANCE;\n            end\n            `WITHDRAW: begin\n            next_state = `WITHDRAW;\n            end\n            `DEPOSIT: begin\n            next_state = `DEPOSIT;\n            end\n            `CHANGE_PIN: begin\n            next_state = `CHANGE_PIN;\n            end\n            default: begin\n            current_state = current_state;\n            end\n        endcase\n        end\n        `BALANCE: begin\n            if (authenticatedFlag == 0) begin\n                functions.showBalanceInfo(balance_database[acc_index],success);\n                authenticatedFlag = 1;\n            end            \n            next_state = `WAITING;\n        end\n        `WITHDRAW: begin\n            if (authenticatedFlag == 0) begin\n                functions.withdrawAndUpdate(amount,balance_database[acc_index],balance_database[acc_index],success);\n                authenticatedFlag = 1;\n            end\n            next_state = `WAITING;\n        end\n        `DEPOSIT: begin\n            if (authenticatedFlag == 0) begin\n                functions.Deposit_Money(amount,balance_database[acc_index],balance_database[acc_index],success);\n                authenticatedFlag = 1;\n            end\n            next_state = `WAITING;\n        end\n        `CHANGE_PIN: begin\n            if (authenticatedFlag == 0) begin\n                authenticator.changePinProcess(newPin,acc_index,success);\n                authenticatedFlag = 1;\n            end\n            next_state = `WAITING;\n        end\n        `IDLE: begin\n        end\n        default: begin\n            next_state = `WAITING;\n        end\n    endcase\n    balance = balance_database[acc_index];\n    fd = $fopen(\"./Database/balance_DB.txt\", \"w\");\n    for (i = 0; i < 10 ; i = i +1 ) begin\n        $fwrite(fd, \"%d\\n\", balance_database[i]);\n    end\n    $fclose(fd);\n    state = current_state;\nend\n\n//      psl show_balance: assert always((state == 2 && operation == 3) -> next(balance == balance_database[prev(acc_index)] ))  @(posedge clk);\n//      psl deposit: assert always((state == 2 && operation ==5) -> next (balance == (prev(balance) + prev(amount))))  @(posedge clk);\n//      psl withdraw: assert always((state == 2 && operation ==4 && (amount <= balance)) -> next (balance == (prev(balance) - prev(amount))))  @(posedge clk);\n//      psl withdraw_NotSufficientFunds: assert always((state == 2 && operation ==6 && (amount>balance) ) -> next (balance == prev(balance)))  @(posedge clk);  \n\nendmodule","lang":"verilog"};
processSrcData(g_data);