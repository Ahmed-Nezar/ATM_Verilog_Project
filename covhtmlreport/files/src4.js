var g_data = {"name":"./Verilog_Code/atm_tb.v","src":"module atm_tb;\n\n    reg clk;\n    reg rst;\n    reg language;\n    reg [2:0] operation;\n    reg [3:0] acc_num;\n    reg [13:0] pin;\n    reg [13:0] amount;\n    reg [13:0] Newpin;\n    wire [13:0] balance;\n    wire success;\n    wire [2:0] state;\n\n\n\n    reg [13:0] pin_random [9:0];\n\n    reg [13:0] pin_db [9:0];\n    reg [13:0] balance_database [9:0];\n    reg [10:0] acc_num_db [9:0];\n    reg[3:0] i;\n    reg[31:0] fd;\n\n    ATM atm_instance (  .clk(clk),\n                        .rst(rst),\n                        .operation(operation),\n                        .acc_num(acc_num),\n                        .pin(pin),            \n                        .newPin(Newpin),\n                        .amount(amount),\n                        .language(language),\n                        .balance(balance),\n                        .success(success),\n                        .state(state)\n    );\n    \n    initial begin\n        clk = 0;\n        forever begin\n            #5 clk = ~clk;\n        end \n    end\n\n    initial begin\n        \n        fd = $fopen(\"./Database/pins.txt\", \"r\");\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            $fscanf(fd, \"%d\\n\", pin_db[i]);\n        end\n        $fclose(fd);\n\n        fd = $fopen(\"./Database/balance_DB.txt\", \"r\");\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            $fscanf(fd, \"%d\\n\", balance_database[i]);\n        end\n        $fclose(fd);\n\n        fd = $fopen(\"./Database/accounts.txt\", \"r\");\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            $fscanf(fd, \"%d\\n\", acc_num_db[i]);\n        end\n        $fclose(fd);\n\n\n        /***************************************************************************************************/\n        rst = 0; operation = 0; acc_num = 0; pin = 0; amount = 0; language = 0; Newpin = 0;\n        @(negedge clk);\n        if (state != 7) begin\n            $display(\"Test Failed\");\n        end\n\n\n        // show balance for all accounts\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            rst = 1; operation = 3; acc_num = acc_num_db[i]; pin = pin_db[i]; amount = 0; language = 0; Newpin = 0;\n            repeat(4) @(negedge clk);\n            if (balance != balance_database[i]) begin\n                $display(\"Test Failed\");\n            end\n        end\n        /***************************************************************************************************/\n        \n        // Withdraw more than balance\n            for (i = 0; i < 10 ; i = i +1 ) begin\n                rst = 1; operation = 4; acc_num = acc_num_db[i]; pin = pin_db[i]; amount = balance_database[i] + 100; language = 0; Newpin = 0;\n                repeat(4) @(negedge clk);\n            end\n\n        /***************************************************************************************************/\n        // deposit 1000 for all accounts\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            rst = 1; operation = 5; acc_num = acc_num_db[i]; pin = pin_db[i]; amount = 1000; language = 0; Newpin = 0;\n            repeat(4) @(negedge clk);\n            if (balance != balance_database[i] + 1000) begin\n                $display(\"Test Failed\");\n            end\n        end\n        /***************************************************************************************************/\n\n        // withdraw from all accounts\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            rst = 1; operation = 4; acc_num = acc_num_db[i]; pin = pin_db[i]; amount = 500; language = 0; Newpin = 0;\n            repeat(4) @(negedge clk);\n            if (balance != balance_database[i] + 1000 - 500) begin\n                $display(\"Test Failed\");\n            end\n        end\n        /***************************************************************************************************/\n\n        // Accounts that doesn't exist\n        for (i = 0; i < 5 ; i = i +1 ) begin\n            rst = 1; operation = 3; acc_num = 11+i; pin = pin_db[9-i]; amount = 0; language = 0; Newpin = 0;\n            repeat(4) @(negedge clk);\n            if (success != 0) begin\n                $display(\"Test Failed\");\n            end\n        end\n        /***************************************************************************************************/              \n        \n        // wrong pin\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            rst = 1; operation = 3; acc_num = acc_num_db[i]; pin = pin_db[9-i]; amount = 0; language = 0; Newpin = 0;\n            repeat(4) @(negedge clk);\n            if (success != 0) begin\n                $display(\"Test Failed\");\n            end\n        end\n        /***************************************************************************************************/\n           // Change pin but having the same pin\n        for ( i = 0; i < 10 ; i = i + 1 ) begin\n            rst = 1; operation = 6; acc_num = acc_num_db[i]; pin = pin_db[i]; amount = 0; language = 0; Newpin = pin_db[i]; \n            repeat(4) @(negedge clk);\n        end\n\n        /***************************************************************************************************/\n         \n         // Changing pins for all accounts\n        rst = 1; operation = 6; acc_num = 1; pin = 1234; amount = 0; language = 0; Newpin = 5678;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 2; pin = 2345; amount = 0; language = 0; Newpin = 6789;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 3; pin = 3456; amount = 0; language = 0; Newpin = 7890;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 4; pin = 4567; amount = 0; language = 0; Newpin = 8901;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 5; pin = 5678; amount = 0; language = 0; Newpin = 9012;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 6; pin = 6789; amount = 0; language = 0; Newpin = 7123;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 7; pin = 7890; amount = 0; language = 0; Newpin = 1234;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 8; pin = 8901; amount = 0; language = 0; Newpin = 2345;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 9; pin = 9012; amount = 0; language = 0; Newpin = 3456;\n        repeat(4) @(negedge clk);\n\n        rst = 1; operation = 6; acc_num = 10; pin = 7123; amount = 0; language = 0; Newpin = 4567;\n        repeat(4) @(negedge clk);\n        /***************************************************************************************************/\n\n         // Testing counter\n        rst = 1; operation = 7; acc_num = 1; pin = pin_db[0]; amount = 0; language = 0; Newpin = 0;\n        repeat(6) @(negedge clk);\n        \n        /***************************************************************************************************/\n         \n        fd = $fopen(\"./Database/pins.txt\", \"r\");\n        for (i = 0; i < 10 ; i = i +1 ) begin\n            $fscanf(fd, \"%d\\n\", pin_random[i]);\n        end\n        $fclose(fd);\n        // random testing\n        for (i = 0 ; i < 10 ; i = i +1) begin\n            rst = 1;\n            operation = $urandom_range(3,6);\n            acc_num = i+1;\n            pin = pin_random[acc_num-1];\n            amount = $urandom_range(0,10000);\n            language = $urandom_range(0,1);\n            Newpin = $urandom_range(1000,9999);\n            repeat(4)@(negedge clk);\n        end\n\n\n        $stop;\n    end\n\n//      psl rst_assert: assert always((rst == 0) -> next (state == 7))  @(posedge clk);\n\n    initial begin\n        $monitor(\"operation=%d, acc_num=%d, pin=%d, amount=%d, language=%b, balance=%d, success=%b, state=%b\", operation, acc_num, pin, amount, language, balance, success, state);\n    end\n    //urandom_range()\nendmodule","lang":"verilog"};
processSrcData(g_data);